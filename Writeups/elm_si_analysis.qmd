---
title: "SI Analysis"
format: 
  html:
    embed-resources: true
    self-contained: true
project:
  execute-dir: project
editor_options: 
  chunk_output_type: console
---

This document presents the analysis code for the inference task reported in
*Relating Scalar Inference and Alternative Activation: A View from the Rise-Fall-Rise Tune in American English*
(Sostarics, Ronai, and Cole 2024).
We only include the code related to the specific analyses and figures
presented in the paper.

```{r setup, message = FALSE}
library(tidyverse)    # Data wrangling
library(contrastable) # Contrast coding
library(brms)         # Modeling
library(cmdstanr)     # Stan backend
library(rstan)        # stan backend
library(sosdiss2)     # Shared project helpers
library(here)         # Path handler
library(tidybayes)    # Draws handler
library(ggdist)       # Draws plotting
options(keep.source = TRUE, width = 180)
```


## SI Model

```{r fit-model}
TUNE_ORDER <- c("hll", "lhsll", "lshll", "hlh", "lhslh", "lshlh")

# Specify manual contrast matrix via hypothesis matrix
manual_contrast_matrix <- 
  matrix(c(rep(1/6,6),               # Centered intercept on grand mean
           -1, 1, 0, 0 ,0 ,0,        # lhsll-hll
           -1, 0, 1, 0, 0, 0,        # lshll-hll
           rep(-1/3,3), rep(1/3,3),  # RFR-Fall
           0,0,0,-1,1,0,             # lhslh-hlh
           0,0,0,-1,0,1),            # lshlh-hlh
         nrow = 6) |> 
  contrastable:::.convert_matrix()

tune_contrasts <- list(tune ~ manual_contrast_matrix | c("lhsll-hll",
                                                         "lshll-hll",
                                                         "RFR-Fall",
                                                         "lhslh-hlh",
                                                         "lshlh-hlh"))


# Load model data and apply contrasts
model_data <- 
  readRDS("Data/SI_model_data_elm.rds") |> 
  mutate(tune = factor(tune, levels = TUNE_ORDER)) |> 
  set_contrasts(tune_contrasts)

# Look at contrasts
MASS::fractions(enlist_contrasts(model_data, tune_contrasts)$tune)

weak_tune_priors <- 
  c(
    prior(normal(0, .5), class = 'b'),
    # From previous work we know these are going to be generally <50%
    prior(normal(-.667, 1), class = "Intercept"), 
    prior(lkj(2), class = "cor"),
    prior(normal(.3,.4), class = 'sd')
  )

si_mdl <- (brm(resp_yes ~ tune + (1+tune|subj_id) + (1+tune|item),
                       data = model_data,
                       prior = weak_tune_priors,
                       chains = 4,
                       cores = 4,
                       seed = 111,
                       iter = 4000,
                       file = "Models/SI_mdl.rds",
                       file_refit = "on_change",
                       family = "bernoulli",
                       backend = 'cmdstanr'))

summary(si_mdl)

pp_check(si_mdl,
         type = "bars_grouped",
         group = "tune",
         ndraws = 100)


sosdiss2::model_to_latex_switch(si_mdl, "siModelStat")
```


```{r empirical-plot, message = FALSE}
PLOT_TUNE_ORDER <- c('hll','lhsll', 'lshll','hlh', 'lhslh', 'lshlh')

avg_si_plot <-
  model_data |> 
  group_by(tune, condition) |> 
  summarize(mean_se(resp_yes)) |> 
  mutate(tune = factor(tune, levels = PLOT_TUNE_ORDER)) |> 
  ggplot(aes(x = tune, y = y, ymin = ymin, ymax = ymax)) +
  geom_point() +
  geom_errorbar() +
  theme_bw(base_size=16) +
  scale_x_discrete(labels = c('H*LL', 'LH*LL', 'L*HLL', 
                              'H*LH', 'LH*LH', 'L*HLH')) +
  xlab("Tune") +
  ylab("Avg SI Rate") +
  theme(panel.grid = element_line(linewidth=.3)) 

avg_si_plot

save_plot(avg_si_plot, "avg_si_plot",rootdir = "Figures/",
          width = 5, height = 5)
```

```{r session-info}
sessionInfo()
```

